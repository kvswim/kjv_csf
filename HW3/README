======================================
600.233: Computer Systems Fundamentals
======================================

Here's some code in support of Assignment 3. Most of this is in Python
but you are free to use any approved programming language for your own
code. For these two please read the comments explaining how to use the
programs:

dis.py
	Disassembler for .scram files
scram.py
	Virtual machine for .scram files

The following are various incarnations of a simple SCRAM program that
you can play with:

loop.s
	Source code for a full-featured SCRAM assembler
loop.z
	Source code for a braindead SCRAM assembler
loop.scram
	Object code that should be produced by an assembler

You'll probably want to carefully read the assignment itself in order
to understand the significance of these files. Suffice it to say that

	./dis.py <loop.scram

will produce the output

-----CUT-----
0x00: LDA 0x04
0x01: ADD 0x05
0x02: STA 0x04
0x03: JMP 0x00
0x04: HLT 0x00
0x05: HLT 0x01
-----CUT-----

whereas

	./scram.py <loop.scram 20

will produce the output

-----CUT-----
AC: 0x00 PC: 0x00 	MEM:  0x14 0x55 0x34 0x70 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x00 PC: 0x01 	MEM:  0x14 0x55 0x34 0x70 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x01 PC: 0x02 	MEM:  0x14 0x55 0x34 0x70 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x01 PC: 0x03 	MEM:  0x14 0x55 0x34 0x70 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x01 PC: 0x00 	MEM:  0x14 0x55 0x34 0x70 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x01 PC: 0x01 	MEM:  0x14 0x55 0x34 0x70 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x02 PC: 0x02 	MEM:  0x14 0x55 0x34 0x70 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x02 PC: 0x03 	MEM:  0x14 0x55 0x34 0x70 0x02 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x02 PC: 0x00 	MEM:  0x14 0x55 0x34 0x70 0x02 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x02 PC: 0x01 	MEM:  0x14 0x55 0x34 0x70 0x02 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x03 PC: 0x02 	MEM:  0x14 0x55 0x34 0x70 0x02 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x03 PC: 0x03 	MEM:  0x14 0x55 0x34 0x70 0x03 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x03 PC: 0x00 	MEM:  0x14 0x55 0x34 0x70 0x03 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x03 PC: 0x01 	MEM:  0x14 0x55 0x34 0x70 0x03 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x04 PC: 0x02 	MEM:  0x14 0x55 0x34 0x70 0x03 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x04 PC: 0x03 	MEM:  0x14 0x55 0x34 0x70 0x04 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x04 PC: 0x00 	MEM:  0x14 0x55 0x34 0x70 0x04 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x04 PC: 0x01 	MEM:  0x14 0x55 0x34 0x70 0x04 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x05 PC: 0x02 	MEM:  0x14 0x55 0x34 0x70 0x04 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
AC: 0x05 PC: 0x03 	MEM:  0x14 0x55 0x34 0x70 0x05 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
maximum number of instructions reached
-----CUT-----

as you would expect. Now have fun. :-D
